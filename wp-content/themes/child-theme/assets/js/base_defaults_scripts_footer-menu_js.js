"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkmarkup_template"] = globalThis["webpackChunkmarkup_template"] || []).push([["base_defaults_scripts_footer-menu_js"],{

/***/ "./base/defaults/scripts/footer-menu.js":
/*!**********************************************!*\
  !*** ./base/defaults/scripts/footer-menu.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _libs_live_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/live-dom */ \"./base/defaults/scripts/libs/live-dom.js\");\n/* harmony import */ var _libs_menu_navigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/menu-navigation */ \"./base/defaults/scripts/libs/menu-navigation.js\");\n\n\n(0,_libs_live_dom__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('[data-menu-navigation]').firstShow(function () {\n  (0,_libs_menu_navigation__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this);\n});\n\n//# sourceURL=webpack://markup-template/./base/defaults/scripts/footer-menu.js?");

/***/ }),

/***/ "./base/defaults/scripts/libs/menu-navigation.js":
/*!*******************************************************!*\
  !*** ./base/defaults/scripts/libs/menu-navigation.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ navigationMenu)\n/* harmony export */ });\nfunction navigationMenu(menuNode) {\n  let menuIdIndex = 0;\n  const menuitemGroups = {};\n  const menuOrientation = {};\n  const firstMenuitem = {};\n  const lastMenuitem = {};\n  const subMenuList = [];\n  function hasSubItems(menuitem) {\n    return menuitem.nextElementSibling.getAttribute('data-role') === 'menu';\n  }\n  function isMenuHorizontal(menuitem) {\n    return menuOrientation[menuitem] === 'horizontal';\n  }\n  function findMenuItems(depth, node, nodes) {\n    let role;\n    let flag;\n    while (node) {\n      flag = true;\n      role = node.getAttribute('data-role');\n      if (role) {\n        role = role.trim().toLowerCase();\n      }\n      switch (role) {\n        case 'menu':\n          node.tabIndex = -1;\n          init(node, depth + 1);\n          flag = false;\n          break;\n        case 'menuitem':\n          nodes.push(node);\n          if (node.nextElementSibling && hasSubItems(node)) {\n            subMenuList.push(node);\n          }\n          break;\n        default:\n          break;\n      }\n      if (flag && node.firstElementChild && node.firstElementChild.tagName !== 'svg') {\n        findMenuItems(depth, node.firstElementChild, nodes);\n      }\n      node = node.nextElementSibling;\n    }\n  }\n  function getMenuItems(menu, depth) {\n    const nodes = [];\n    findMenuItems(depth, menu.firstElementChild, nodes);\n    return nodes;\n  }\n  function setFocusToMenuitem(menuId, newMenuitem) {\n    if (menuitemGroups[menuId]) {\n      menuitemGroups[menuId].forEach(item => {\n        if (item === newMenuitem) {\n          item.tabIndex = 0;\n          newMenuitem.focus();\n        } else {\n          item.tabIndex = -1;\n        }\n      });\n    }\n  }\n  function setFocusToFirstMenuitem(menuId) {\n    setFocusToMenuitem(menuId, firstMenuitem[menuId]);\n  }\n  function setFocusToLastMenuitem(menuId) {\n    setFocusToMenuitem(menuId, lastMenuitem[menuId]);\n  }\n  function setFocusToPreviousMenuitem(menuId, currentMenuitem) {\n    let newMenuitem;\n    let index;\n    if (currentMenuitem === firstMenuitem[menuId]) {\n      newMenuitem = lastMenuitem[menuId];\n    } else {\n      index = menuitemGroups[menuId].indexOf(currentMenuitem);\n      newMenuitem = menuitemGroups[menuId][index - 1];\n    }\n    setFocusToMenuitem(menuId, newMenuitem);\n    return newMenuitem;\n  }\n  function setFocusToNextMenuitem(menuId, currentMenuitem) {\n    let newMenuitem;\n    let index;\n    if (currentMenuitem === lastMenuitem[menuId]) {\n      newMenuitem = firstMenuitem[menuId];\n    } else {\n      index = menuitemGroups[menuId].indexOf(currentMenuitem);\n      newMenuitem = menuitemGroups[menuId][index + 1];\n    }\n    setFocusToMenuitem(menuId, newMenuitem);\n    return newMenuitem;\n  }\n  function getIdFromAriaLabel(node) {\n    let id = node.dataset.menuId;\n    if (!id) {\n      node.dataset.menuId = (++menuIdIndex).toString();\n      id = node.dataset.menuId;\n    }\n    return id;\n  }\n  function getMenuOrientation(node) {\n    let orientation = node.getAttribute('aria-orientation');\n    if (!orientation) {\n      const role = node.getAttribute('data-role');\n      switch (role) {\n        case 'menubar':\n          orientation = 'horizontal';\n          break;\n        case 'menu':\n          orientation = 'vertical';\n          break;\n        default:\n          break;\n      }\n    }\n    return orientation;\n  }\n  function getMenuId(node) {\n    let id = false;\n    let role = node.getAttribute('data-role');\n    while (node && role !== 'menu' && role !== 'menubar') {\n      node = node.parentNode;\n      if (node) {\n        role = node.getAttribute('data-role');\n      }\n    }\n    if (node) {\n      id = `${role}-${getIdFromAriaLabel(node)}`;\n    }\n    return id;\n  }\n  function getMenu(menuitem) {\n    let menu = menuitem;\n    let role = menuitem.getAttribute('data-role');\n    while (menu && role !== 'menu' && role !== 'menubar') {\n      menu = menu.parentNode;\n      if (menu) {\n        role = menu.getAttribute('data-role');\n      }\n    }\n    return menu;\n  }\n  function onKeydown(event) {\n    const {\n      currentTarget: tgt,\n      key\n    } = event;\n    const menuId = getMenuId(tgt);\n    let flag = false;\n    let id;\n    let subItemId;\n    let mi;\n    document.querySelectorAll('.footer-menu-tooltip').forEach(tip => {\n      tip.remove();\n    });\n    switch (key) {\n      case 'Esc':\n      case 'Escape':\n        const menu = getMenu(tgt);\n        if (menu.previousElementSibling) {\n          menu.previousElementSibling.focus();\n        }\n        flag = true;\n        break;\n      case 'Up':\n      case 'ArrowUp':\n        if (isMenuHorizontal(menuId)) {\n          if (tgt.nextElementSibling && hasSubItems(tgt)) {\n            subItemId = getMenuId(tgt.nextElementSibling);\n            setFocusToLastMenuitem(subItemId);\n          }\n        } else {\n          setFocusToPreviousMenuitem(menuId, tgt);\n        }\n        flag = true;\n        break;\n      case 'ArrowDown':\n      case 'Down':\n        if (isMenuHorizontal(menuId)) {\n          if (tgt.nextElementSibling && hasSubItems(tgt)) {\n            subItemId = getMenuId(tgt.nextElementSibling);\n            setFocusToFirstMenuitem(subItemId);\n          }\n        } else {\n          setFocusToNextMenuitem(menuId, tgt);\n        }\n        flag = true;\n        break;\n      case 'Left':\n      case 'ArrowLeft':\n        if (isMenuHorizontal(menuId)) {\n          setFocusToPreviousMenuitem(menuId, tgt);\n        } else if (getMenu(tgt) && getMenu(getMenu(tgt).previousElementSibling).getAttribute('data-role') !== 'menubar') {\n          mi = getMenu(tgt).previousElementSibling;\n          id = getMenuId(mi);\n          setFocusToMenuitem(id, mi);\n        } else {\n          mi = getMenu(tgt).previousElementSibling;\n          id = getMenuId(mi);\n          setFocusToPreviousMenuitem(id, mi);\n        }\n        flag = true;\n        break;\n      case 'Right':\n      case 'ArrowRight':\n        if (isMenuHorizontal(menuId)) {\n          setFocusToNextMenuitem(menuId, tgt);\n        } else if (tgt.nextElementSibling) {\n          subItemId = getMenuId(tgt.nextElementSibling);\n          setFocusToFirstMenuitem(subItemId);\n        } else {\n          let subMenuItem = tgt;\n          let subMenu = getMenu(tgt);\n          let role = subMenu.getAttribute('data-role');\n          while (subMenu && role !== 'menubar') {\n            subMenuItem = subMenu.previousElementSibling;\n            subMenu = getMenu(subMenuItem);\n            if (subMenu) {\n              role = subMenu.getAttribute('data-role');\n            }\n          }\n          setFocusToNextMenuitem(getMenuId(subMenu), subMenuItem);\n        }\n        flag = true;\n        break;\n      case 'Home':\n      case 'PageUp':\n        setFocusToFirstMenuitem(menuId, tgt);\n        flag = true;\n        break;\n      case 'End':\n      case 'PageDown':\n        setFocusToLastMenuitem(menuId, tgt);\n        flag = true;\n        break;\n      default:\n        break;\n    }\n    if (flag) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  }\n  function setTooltip(event) {\n    const {\n      currentTarget: tgt,\n      key\n    } = event;\n    const tooltip = !!subMenuList.length ? 'use &#8592; &#8595; &#8594; to navigate' : 'use &#8592; / &#8594; to navigate';\n    if (key === 'Tab' || key === 'Left' || key === 'ArrowLeft' || key === 'Right' || key === 'ArrowRight') {\n      tgt.innerHTML += `<span class=\"footer-menu-tooltip\" aria-hidden=\"true\">${tooltip}</span>`;\n    }\n  }\n  function init(menu, depth) {\n    let menuitem;\n    let role;\n    const menuId = getMenuId(menu);\n    const menuItems = getMenuItems(menu, depth);\n    menuOrientation[menuId] = getMenuOrientation(menu);\n    menuitemGroups[menuId] = [];\n    firstMenuitem[menuId] = null;\n    lastMenuitem[menuId] = null;\n    for (let i = 0; i < menuItems.length; i++) {\n      menuitem = menuItems[i];\n      role = menuitem.getAttribute('data-role');\n      if (role.indexOf('menuitem') < 0) {\n        continue;\n      }\n      menuitem.tabIndex = -1;\n      menuitemGroups[menuId].push(menuitem);\n      menuitem.addEventListener('keydown', onKeydown);\n      if (!firstMenuitem[menuId]) {\n        firstMenuitem[menuId] = menuitem;\n      }\n      lastMenuitem[menuId] = menuitem;\n    }\n  }\n  init(menuNode, 0);\n  const firstItem = menuNode.querySelector('[data-role=menuitem]');\n  if (firstItem) {\n    firstItem.tabIndex = 0;\n    firstItem.addEventListener('keyup', setTooltip);\n  }\n}\n\n//# sourceURL=webpack://markup-template/./base/defaults/scripts/libs/menu-navigation.js?");

/***/ })

}]);