"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(globalThis["webpackChunkmarkup_template"] = globalThis["webpackChunkmarkup_template"] || []).push([["base_defaults_scripts_menu_js"],{

/***/ "./base/defaults/scripts/libs/accessibility-menu.js":
/*!**********************************************************!*\
  !*** ./base/defaults/scripts/libs/accessibility-menu.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ accessibilityMenu)\n/* harmony export */ });\nfunction accessibilityMenu(menuNode) {\n  let menuIdIndex = 0;\n  const popups = [];\n  const menuitemGroups = {};\n  const menuOrientation = {};\n  const isPopup = {};\n  const isPopout = {};\n  const firstMenuitem = {};\n  const lastMenuitem = {};\n  function hasPopup(menuitem) {\n    return menuitem.getAttribute('aria-haspopup') === 'true';\n  }\n  function isOpen(menuitem) {\n    return menuitem.getAttribute('aria-expanded') === 'true';\n  }\n  function isMenubar(menuId) {\n    return !isPopup[menuId] && !isPopout[menuId];\n  }\n  function isMenuHorizontal(menuitem) {\n    return menuOrientation[menuitem] === 'horizontal';\n  }\n  function findMenuItems(depth, node, nodes) {\n    let role;\n    let flag;\n    while (node) {\n      flag = true;\n      role = node.getAttribute('data-role');\n      if (role) {\n        role = role.trim().toLowerCase();\n      }\n      switch (role) {\n        case 'menu':\n          node.tabIndex = -1;\n          init(node, depth + 1);\n          flag = false;\n          break;\n        case 'menuitem':\n          if (node.getAttribute('aria-haspopup') === 'true') {\n            popups.push(node);\n          }\n          nodes.push(node);\n          break;\n        default:\n          break;\n      }\n      if (flag && node.firstElementChild && node.firstElementChild.tagName !== 'svg') {\n        findMenuItems(depth, node.firstElementChild, nodes);\n      }\n      node = node.nextElementSibling;\n    }\n  }\n  function getMenuItems(menu, depth) {\n    const nodes = [];\n    findMenuItems(depth, menu.firstElementChild, nodes);\n    return nodes;\n  }\n  function doesNotContain(popup, menuItem) {\n    if (menuItem) {\n      return !popup.nextElementSibling.contains(menuItem);\n    }\n    return true;\n  }\n  function closePopupAll(menuItem) {\n    const isMenuItem = typeof menuItem !== 'object' ? false : menuItem;\n    for (let i = 0; i < popups.length; i++) {\n      const popup = popups[i];\n      if (doesNotContain(popup, isMenuItem) && isOpen(popup)) {\n        const cmi = popup.nextElementSibling;\n        if (cmi) {\n          popup.setAttribute('aria-expanded', 'false');\n          cmi.classList.remove('open');\n        }\n      }\n    }\n  }\n  function setFocusToMenuitem(menuId, newMenuitem) {\n    closePopupAll(newMenuitem);\n    if (menuitemGroups[menuId]) {\n      menuitemGroups[menuId].forEach(item => {\n        if (item === newMenuitem) {\n          item.tabIndex = 0;\n          newMenuitem.focus();\n        } else {\n          item.tabIndex = -1;\n        }\n      });\n    }\n  }\n  function setFocusToFirstMenuitem(menuId) {\n    setFocusToMenuitem(menuId, firstMenuitem[menuId]);\n  }\n  function setFocusToLastMenuitem(menuId) {\n    setFocusToMenuitem(menuId, lastMenuitem[menuId]);\n  }\n  function setFocusToPreviousMenuitem(menuId, currentMenuitem) {\n    let newMenuitem;\n    let index;\n    if (currentMenuitem === firstMenuitem[menuId]) {\n      newMenuitem = lastMenuitem[menuId];\n    } else {\n      index = menuitemGroups[menuId].indexOf(currentMenuitem);\n      newMenuitem = menuitemGroups[menuId][index - 1];\n    }\n    setFocusToMenuitem(menuId, newMenuitem);\n    return newMenuitem;\n  }\n  function setFocusToNextMenuitem(menuId, currentMenuitem) {\n    let newMenuitem;\n    let index;\n    if (currentMenuitem === lastMenuitem[menuId]) {\n      newMenuitem = firstMenuitem[menuId];\n    } else {\n      index = menuitemGroups[menuId].indexOf(currentMenuitem);\n      newMenuitem = menuitemGroups[menuId][index + 1];\n    }\n    setFocusToMenuitem(menuId, newMenuitem);\n    return newMenuitem;\n  }\n  function getIdFromAriaLabel(node) {\n    let id = node.dataset.menuId;\n    if (!id) {\n      node.dataset.menuId = (++menuIdIndex).toString();\n      id = node.dataset.menuId;\n    }\n    return id;\n  }\n  function getMenuOrientation(node) {\n    let orientation = node.getAttribute('aria-orientation');\n    if (!orientation) {\n      const role = node.getAttribute('data-role');\n      switch (role) {\n        case 'menubar':\n          orientation = 'horizontal';\n          break;\n        case 'menu':\n          orientation = 'vertical';\n          break;\n        default:\n          break;\n      }\n    }\n    return orientation;\n  }\n  function getMenuId(node) {\n    let id = false;\n    let role = node.getAttribute('data-role');\n    while (node && role !== 'menu' && role !== 'menubar') {\n      node = node.parentNode;\n      if (node) {\n        role = node.getAttribute('data-role');\n      }\n    }\n    if (node) {\n      id = `${role}-${getIdFromAriaLabel(node)}`;\n    }\n    return id;\n  }\n  function getMenu(menuitem) {\n    let menu = menuitem;\n    let role = menuitem.getAttribute('data-role');\n    while (menu && role !== 'menu' && role !== 'menubar') {\n      menu = menu.parentNode;\n      if (menu) {\n        role = menu.getAttribute('data-role');\n      }\n    }\n    return menu;\n  }\n  function isAnyPopupOpen() {\n    for (let i = 0; i < popups.length; i++) {\n      if (popups[i].getAttribute('aria-expanded') === 'true') {\n        return true;\n      }\n    }\n    return false;\n  }\n  function setMenubarDataExpanded(value) {\n    menuNode.setAttribute('data-menubar-item-expanded', value);\n  }\n  function isMenubarDataExpandedTrue() {\n    return menuNode.getAttribute('data-menubar-item-expanded') === 'true';\n  }\n  function openPopup(menuId, menuitem) {\n    const popupMenu = menuitem.nextElementSibling;\n    if (popupMenu) {\n      const rect = menuitem.getBoundingClientRect();\n      if (isPopup[menuId]) {\n        popupMenu.style.left = `${rect.width - 1}px`;\n        popupMenu.classList.add('open');\n      } else {\n        popupMenu.classList.add('open');\n      }\n      menuitem.setAttribute('aria-expanded', 'true');\n      setMenubarDataExpanded('true');\n      return getMenuId(popupMenu);\n    }\n    return false;\n  }\n  function closePopout(menuitem) {\n    let menu;\n    let menuId = getMenuId(menuitem);\n    let cmi = menuitem;\n    while (isPopup[menuId] || isPopout[menuId]) {\n      menu = getMenu(cmi);\n      cmi = menu.previousElementSibling;\n      menuId = getMenuId(cmi);\n      menu.classList.remove('open');\n    }\n    cmi.focus();\n    return cmi;\n  }\n  function closePopup(menuitem) {\n    let menu;\n    let cmi = menuitem;\n    const menuId = getMenuId(menuitem);\n    if (isMenubar(menuId)) {\n      if (isOpen(menuitem)) {\n        menuitem.setAttribute('aria-expanded', 'false');\n        menuitem.nextElementSibling.classList.remove('open');\n      }\n    } else {\n      menu = getMenu(menuitem);\n      cmi = menu.previousElementSibling;\n      cmi.setAttribute('aria-expanded', 'false');\n      cmi.focus();\n      menu.classList.remove('open');\n    }\n    return cmi;\n  }\n  function onKeydown(event) {\n    const {\n      currentTarget: tgt,\n      key\n    } = event;\n    const menuId = getMenuId(tgt);\n    let flag = false;\n    let id;\n    let popupMenuId;\n    let mi;\n    document.querySelectorAll('.menu-tooltip').forEach(tip => {\n      tip.remove();\n    });\n    switch (key) {\n      case ' ':\n        if (hasPopup(tgt)) {\n          popupMenuId = openPopup(menuId, tgt);\n          setFocusToFirstMenuitem(popupMenuId);\n        } else if (tgt.href !== '#') {\n          closePopupAll();\n          setMenubarDataExpanded('false');\n        }\n        flag = true;\n        break;\n      case 'Esc':\n      case 'Escape':\n        mi = closePopup(tgt);\n        id = getMenuId(mi);\n        setMenubarDataExpanded('false');\n        flag = true;\n        break;\n      case 'Up':\n      case 'ArrowUp':\n        if (isMenuHorizontal(menuId)) {\n          if (hasPopup(tgt)) {\n            popupMenuId = openPopup(menuId, tgt);\n            setFocusToLastMenuitem(popupMenuId);\n          }\n        } else {\n          setFocusToPreviousMenuitem(menuId, tgt);\n        }\n        flag = true;\n        break;\n      case 'ArrowDown':\n      case 'Down':\n        if (isMenuHorizontal(menuId)) {\n          if (hasPopup(tgt)) {\n            popupMenuId = openPopup(menuId, tgt);\n            setFocusToFirstMenuitem(popupMenuId);\n          }\n        } else {\n          setFocusToNextMenuitem(menuId, tgt);\n        }\n        flag = true;\n        break;\n      case 'Left':\n      case 'ArrowLeft':\n        if (isMenuHorizontal(menuId)) {\n          mi = setFocusToPreviousMenuitem(menuId, tgt);\n          if (isAnyPopupOpen() || isMenubarDataExpandedTrue()) {\n            openPopup(menuId, mi);\n          }\n        } else if (isPopout[menuId]) {\n          mi = closePopup(tgt);\n          id = getMenuId(mi);\n          setFocusToMenuitem(id, mi);\n        } else {\n          mi = closePopup(tgt);\n          id = getMenuId(mi);\n          mi = setFocusToPreviousMenuitem(id, mi);\n          openPopup(id, mi);\n        }\n        flag = true;\n        break;\n      case 'Right':\n      case 'ArrowRight':\n        if (isMenuHorizontal(menuId)) {\n          mi = setFocusToNextMenuitem(menuId, tgt);\n          if (isAnyPopupOpen() || isMenubarDataExpandedTrue()) {\n            openPopup(menuId, mi);\n          }\n        } else if (hasPopup(tgt)) {\n          popupMenuId = openPopup(menuId, tgt);\n          setFocusToFirstMenuitem(popupMenuId);\n        } else {\n          mi = closePopout(tgt);\n          id = getMenuId(mi);\n          mi = setFocusToNextMenuitem(id, mi);\n          openPopup(id, mi);\n        }\n        flag = true;\n        break;\n      case 'Home':\n      case 'PageUp':\n        setFocusToFirstMenuitem(menuId, tgt);\n        flag = true;\n        break;\n      case 'End':\n      case 'PageDown':\n        setFocusToLastMenuitem(menuId, tgt);\n        flag = true;\n        break;\n      case 'Tab':\n        setMenubarDataExpanded('false');\n        closePopup(tgt);\n        break;\n      default:\n        break;\n    }\n    if (flag) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  }\n  function onMenuitemPointerover(event) {\n    const tgt = event.currentTarget;\n    const menuId = getMenuId(tgt);\n    closePopupAll(tgt);\n    if (hasPopup(tgt)) {\n      openPopup(menuId, tgt);\n    }\n  }\n  function onBackgroundPointerdown(event) {\n    if (event.relatedTarget && !menuNode.contains(event.relatedTarget)) {\n      closePopupAll();\n    }\n  }\n  function setTooltip(event) {\n    const {\n      currentTarget: tgt,\n      key\n    } = event;\n    const tooltip = !!popups.length ? 'use &#8592; &#8595; &#8594; to navigate' : 'use &#8592; / &#8594; to navigate';\n    if (key === 'Tab' || key === 'Left' || key === 'ArrowLeft' || key === 'Right' || key === 'ArrowRight') {\n      tgt.innerHTML += `<span class=\"menu-tooltip\" aria-hidden=\"true\">${tooltip}</span>`;\n    }\n  }\n  function init(menu, depth) {\n    const menuId = getMenuId(menu);\n    const menuItems = getMenuItems(menu, depth);\n    menuOrientation[menuId] = getMenuOrientation(menu);\n    isPopup[menuId] = menu.getAttribute('data-role') === 'menu' && depth === 1;\n    isPopout[menuId] = menu.getAttribute('data-role') === 'menu' && depth > 1;\n    menuitemGroups[menuId] = [];\n    firstMenuitem[menuId] = null;\n    lastMenuitem[menuId] = null;\n    for (let i = 0; i < menuItems.length; i++) {\n      const menuitem = menuItems[i];\n      const role = menuitem.getAttribute('data-role');\n      if (role.indexOf('menuitem') < 0) {\n        continue;\n      }\n      menuitem.tabIndex = -1;\n      menuitemGroups[menuId].push(menuitem);\n      menuitem.addEventListener('keydown', onKeydown);\n      menuitem.addEventListener('pointerover', onMenuitemPointerover);\n      if (!firstMenuitem[menuId]) {\n        if (hasPopup(menuitem)) {\n          menuitem.tabIndex = 0;\n        }\n        firstMenuitem[menuId] = menuitem;\n      }\n      lastMenuitem[menuId] = menuitem;\n    }\n  }\n  init(menuNode, 0);\n  menuNode.addEventListener('mouseout', onBackgroundPointerdown, true);\n  const firstItem = menuNode.querySelector('[data-role=menuitem]');\n  if (firstItem) {\n    firstItem.tabIndex = 0;\n    firstItem.addEventListener('keyup', setTooltip);\n  }\n}\n\n//# sourceURL=webpack://markup-template/./base/defaults/scripts/libs/accessibility-menu.js?");

/***/ }),

/***/ "./base/defaults/scripts/menu.js":
/*!***************************************!*\
  !*** ./base/defaults/scripts/menu.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _libs_live_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libs/live-dom */ \"./base/defaults/scripts/libs/live-dom.js\");\n/* harmony import */ var _libs_accessibility_menu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libs/accessibility-menu */ \"./base/defaults/scripts/libs/accessibility-menu.js\");\n\n\n(0,_libs_live_dom__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('[data-accessibility-menu]').firstShow(function () {\n  (0,_libs_accessibility_menu__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this);\n});\n\n//# sourceURL=webpack://markup-template/./base/defaults/scripts/menu.js?");

/***/ })

}]);